np.set_printoptions(threshold=np.nan)  <--- 모든 data 다 표시
np.set_printoptions(precision=4)  <--- 유효숫자 표시
np.set_printoptions(suppress=True) <----- e없이 표시
====================================================================
import ctypes  # An included library with Python install.
def Mbox(title, text, style):
    ctypes.windll.user32.MessageBoxW(0, text, title, style)
====================================================================
np.shape ==> (n1-axis=0,n2-axis=1,n3-axis=2,...)
np.sum(x, axis=n) ==>  axis n 이 없으짐
===================================================================
np.squeeze(x) <== Remove single-dimensional entries from the shape of an array
np.expand_dims <== Insert a new axis, corresponding to a given position in the array shape
===================================================================
a=[1,1,2,2]
a= list(map((lambda x: x*x),a))
===================================================================
a=np.array([1,2,3,4,5,4,3,2,10]
b = a[a<5]  # numpy array이기 때문에 가능

# list comprehension
a=[1,2,3,4,5,4,3,2,10]
b = [ x*10 for x in a if x< 5]

===================================================================
# sting ==> float변환
a = [['1.2','2.33'],['1.2','2.33']]
b = np.array(a,dtype=np.float32)

# numpy array ==> list
c = b.tolist()
===================================================================
A[[0,1,2],[0,0,1]] = [1,2,7]   #numpy array A[0,0],A[1,0],A[2,1]에 각각 1,2,7


===================================================================
# Symmetric Matrix는 singular value = eigenvalue
# np.linalg의 첫번째  return  U의 열vector가 eigenvector에 해당함.


import numpy as np
np.set_printoptions(threshold=np.nan)
#a = np.random.randint(10, size=(9, 6))
#a =np.array([[0, 9, 7, 9, 1, 6],
#       [2, 3, 7, 8, 9, 6],
#       [2, 3, 4, 5, 9, 4],
#       [5, 8, 0, 3, 9, 5],
#       [7, 9, 9, 8, 4, 1],
#       [2, 7, 8, 2, 0, 0],
#       [8, 7, 0, 4, 8, 3],
#       [9, 2, 3, 8, 3, 0],
#       [6, 6, 2, 0, 9, 0]])


a =np.array([[5,-7,7],[4,-3,4],[4,-1,2]])
a = a.T.dot(a)

U, s, V = np.linalg.svd(a, full_matrices=True)

UU, ss, VV = np.linalg.svd(a, full_matrices=False) # "numerical recipes" 는 False에 해당하는 것을 구현

w,z = np.linalg.eig(a)

=====================================================================================
def f(x):
    return x+10

# make another list from a list
A = [1,2,3,4]
A2=[[1,2],[3,4],[5,6]]
#B = [x*10 for x in A]
#B = [f(x) for x in A]

#B = list(map(lambda x: x*10,A))
B = list(map(f,A))

df = pd.DataFrame(A2, columns=['age','age2'])
df['age']= df['age'].apply(f)
=====================================================================================
# DataFrame은 dict형으로 만들거나,  List에서 칼럼명을 지정해서 만들 수 있다.
df = pd.DataFrame({'Name':['C','K','P'],'age':[34,53,25]})


A=[[2,3,4],[3,3,5],[5,63,4],[3,4,5]]
A1=['a1','a2','a3']
A2=['x1','x2','x3','x4']
df2=pd.DataFrame(data=A,index=A2,columns=A1)

df3 = df2[['a3','a2']]  # 일부 칼럼만 가져오기
df3.columns = ['XX1','XX2']


======================
A = np.array([[13,24,3],[10,20,10],[100,1,1]])
print(A)
df2 = pd.DataFrame(A[1:,1:],columns=A[0,1:],index =A[1:,0])
print(df2)

=====================

모든 data출력
pandas.set_option('display.max_columns', None,'display.max_rows', None)

#Pivot
mydatapd = pd.DataFrame(mydata,columns=['A','B','C'])
mydatapd = mydatapd.pivot(index ='A',columns='B',values='C')

=====================================================================================
import pickle
var1 = xxx
var2 = xxx
var3 = xx

with open('test.txt','wb') as f:
	pickle.dump(var1,f)
	pickle.dump(var2,f)
	pickle.dump(var3,f)



덤프(dump)한 순서대로 로드(load)된다.
 
with open('test.txt','rb') as f:
	data1=pickle.load(f)
	data2=pickle.load(f)
	data3=pickle.load(f)



dict형으로 변수들을 묶어서 한번에 쓰고, 한번에 읽어올수 있다.
파일을 열때 'b'(binary)로 해야함.
=====================================================================================
# save to file. (1d, 2d array only)
np.savetxt("foo.txt", X1, delimiter=",")
=====================================================================================
np.random.standard_normal(size=(2,3))
d = np.array(100 * np.random.standard_normal(size=(2,3)),dtype=np.int16)/100
=====================================================================================
a = "123456789"
print("a[:]: ", a[:])  #123456789
print("a[::]: ", a[::])  #123456789
print("a[::3]: ", a[::3]) #147
print("a[::-1]: ", a[::-1]) #987654321

================================================
# 역순으로 for loop
for t in np.arange(5)[::-1]:
    print(t)

# reversed
for t in reversed(range(5)):
    print(t)

================================================
mat = [[1, 2, 3], [4, 5, 6]]
A = list(zip(*mat))   # [(1, 4), (2, 5), (3, 6)]
B= list(np.array(A))
print(B)   # [array([1, 4]), array([2, 5]), array([3, 6])]
C = np.array(A).tolist()
print(C)  # [[1, 4], [2, 5], [3, 6]]
=========================================================

a = ["Code", "mentor", "Python", "Developer"]
print (" ".join(a))  #  Code mentor Python Developer

=====================================================================================
datetime.date(2017,7,17)+datetime.timedelta(days=4)
=====================================================================================
# list, numpy 모두 그냥 할당하면 같은 곳 참조, copy를 해야

a = np.array([2,3,4])
b=a  # b=a.copy()
b[0] = 10

print(a,b)  #[10  3  4] [10  3  4]


a = [2,3,4]
b=a   # b=a.copy()
b[0] = 10

print(a,b)  #[10  3  4] [10  3  4]
=====================================================================================
from IPython.display import display, Math, Latex
display(Math(r'F(k) = \int_{-\infty}^{\infty} f(x) e^{2\pi i k} dx'))
=====================================================================================
경과시간

import time
s=time.time()
...
e=time.time()

print(e-s,"sec")
=====================================================================================
A = np.array([[1,2,0,0,0],[2,3,5,0,0],[0,1,3,2,0],[0,0,1,2,3],[0,0,0,2,1]])
B = np.array([2,3,1,0,1]).T

X = np.linalg.solve(A,B.T)
print(X, A.dot(X))
=====================================================================================
#이진수 만들기
import numpy as np
A = np.array([range(5)],dtype=np.uint8).T
B = np.unpackbits(A,axis=1)
=====================================================================================
"""
mydata3.txt
3
5
1.2,3,4,5,6
33,1,2,3,4
2,3.4,5.5,6,6


"""
import numpy as np

file = open("mydata3.txt")
line  = file.readline()
dimX = int(line)

line  = file.readline()
dimY = int(line)

lines = file.readlines()
lines = ','.join(lines)
lines = lines.replace('\n','')
data = np.fromstring(lines,sep=',',dtype=np.float).reshape(dimX,dimY)
print(data)
=====================================================================================
import numpy as np

A ={'a':[1,2,3],'b': [3,4,5,3,6,6,4]}  # dict

np.save('test.npy',A)

a = np.load('test.npy')  # numpy.ndarray
b = a.item()  # 저장했던 dict. 이렇게 해야, b가 a와 같은 dict가 된다.
=====================================================================================
# 파일 한줄씩 읽어, list에 저장
with open('wnids.txt', 'r') as f:
    A = [x.strip() for x in f]
    
=====================================================================================
# loadtxt, genfromtxt는 같은 기능이지만, 
# genfromtxt는 missing data를 다룰 수 있는 다양한 옵션이 있다.
# numpy.loadtxt: equivalent function when no data is missing.


mydata = np.genfromtxt('mydata2.txt',delimiter=',',dtype=np.float32)
mydata = np.loadtxt('mydata2.txt', delimiter=',', dtype=np.float32)    
    
=====================================================================================
random 선택

N = 100
A = np.arange(N)
choice = np.random.choice(N,10)  # 중복있음
choice = np.random.choice(N,10, replace=False)

B = A[choice]

=============================================
import numpy as np
import random
from collections import deque
A = deque(maxlen=100)

A.append([3.5,1])
A.append([4.5,5])
A.append([5.5,2])
A.append([6.5,1])
A.append([7.5,3])

B = random.sample(A,2)
C = np.random.choice(A,2)  # ==> error. must be 1-dimensional


=============================================
Shuffle
s = np.arange(A.shape[0])
np.random.shuffle(s)

A1 = A[s]
B1 = A[s]
=====================================================================================
import numpy as np

#처음에 data 없이 빈공간만 shape에 맞게 만들기
a = np.empty(0).reshape(0,3,2)
b= np.array([[[1.2,2],[3,4],[5,6]]])
c = np.concatenate((a,b),0)
=====================================================================================
import argparse

parser = argparse.ArgumentParser(description='Easy Implementation of DCGAN')

# parameters
parser.add_argument('datasets', metavar='N', type=str, nargs='+', choices=['celebA', 'lsun', 'mnist'],
           help='name of dataset to download [celebA, lsun, mnist]')
# 위의 경우와 같이 -- 없이 'datasets'만 있는 경우, argument값만 넘겨야 한다.
# nargs='+' ==> 여러개의 argument가 list로 들어간다.


parser.add_argument('--filelist', type=str, default='filelist.txt')
parser.add_argument('--out_dir', type=str, default='./output', help="where to put output files")
parser.add_argument('--epochs', type=int, default=10)
parser.add_argument('--batch_size', type=int, default=32)
parser.add_argument('--batch_size2', required=True, choices=["aa","bb"])   <----- required=True 항목이 빠지면, usage를 출력하면서 끝난다.

# 옵션에 따라 하나의 parameter 설정
parser.add_argument("--flip", dest="flip", action="store_true", help="flip images horizontally")
parser.add_argument("--no_flip", dest="flip", action="store_false", help="don't flip images horizontally")
parser.set_defaults(flip=True)

args = parser.parse_args()
filelist_dir = args.filelist
output_dir = args.out_dir

total_epoch = args.epochs
batch_size = args.batch_size

print(filelist_dir, output_dir, total_epoch,batch_size  )

> python  zzz.py -h   ==> help 출력
=====================================================================================
flags = tf.app.flags
이 함수는 argparse 모듈과 같은 역할을 합니다. argparse보다 나은 점은 저가 볼 때는 굳이 argparser를 import 할 필요 없이 아래와 같이 추가만 하면 됩니다.

flags = tf.app.flags
flags.DEFINE_integer("epoch", 25, "Epoch to train [25]")
flags.DEFINE_string("sample_dir", "samples", "Directory name to save the image samples [samples]")
flags.DEFINE_boolean("is_crop", False, "True for training, False for testing [False]")
FLAGS = flags.FLAGS

if not os.path.exists(FLAGS.checkpoint_dir):
    os.makedirs(FLAGS.checkpoint_dir)

flags에 tf.app.flags 를 통해 객체를 저장하고 DEFINE_integer나 DEFINE_string 을 통해 아래 argparse와 같은 역할을 할 수 있습니다

=====================================================================================
image 읽기

img = skimage.io.imread(path)  ==> 정수 data
resized_img = skimage.transform.resize(crop_img, (img_size, img_size))  #정수 data image가 넘어와도 float로. preserve_range=True(정수형태지만, type은 float)

skimage.io.imshow(img)
plt.show()
======
im = scipy.misc.imread   ==> 정수 data
im = scipy.misc.imresize(im, self.resize)

scipy.misc.imsave(save_path, im)
=====================================================================================
import os, glob
a = os.path.join("../tensorflow-style-transfer-master","images", "*.jpg") #string을  \로 이어  path를 만든다.
b = glob.glob(a) # wild card를 풀어  filename list를 만든다.
=====================================================================================
import gzip,os
import numpy as np
import skimage.io
import scipy.misc
import matplotlib.pyplot as plt

data_dir = 'D:\hccho\ML\PythonCode\CommonDataset\mnist'
fd = os.path.join(data_dir,'train-images-idx3-ubyte.gz')
with gzip.open(fd, 'rb') as f:
    loaded = np.frombuffer(f.read(), np.uint8, offset=16)
    trX = loaded.reshape((60000,28,28,1)).astype(np.float)  


skimage.io.imshow(np.squeeze(trX[0]/255.0))
plt.show()
skimage.io.imshow(np.squeeze((trX[0]/255.0 +1)/2))
plt.show()


plt.imshow(np.squeeze(trX[0]/255.0))
plt.show()
plt.imshow(np.squeeze((trX[0]/255.0 +1)/2))


#scipy.misc.imsave("a.jpg",np.squeeze(trX[0]/255.0))  # 0~1
#scipy.misc.imsave("b.jpg",np.squeeze((trX[0]/255.0 +1)/2)) 0.5~1

img1 = skimage.io.imread("a.jpg")
img2 = skimage.io.imread("b.jpg")
=====================================================================================
from PIL import Image
import os, glob

#image_files = glob.glob("./*.png")
image_files = glob.glob("../DCGAN-tensorflow-master/samples/test*.png")


images = [Image.open(f) for f in image_files]

gif = images[0]
gif.save(fp="./output.gif", format='gif', save_all=True, append_images=images[1:])
print(Image.open("./output.gif").n_frames)
=====================================================================================
print(os.listdir("../"))     <---모든 디렉토리

=====================================================================================
#list 원소 모두 곱하기
from functools import reduce

A = [2,3,5]
result = reduce(lambda x, y: x * y, A)
print(result)

#np.prod로 하면 더 간단함.
np.prod(A)
=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================
class HC:
    def __init__(self,a):
        self._a = a
    @property
    def x(self):
        return self._a
    @x.setter 
    def x(self,xx):
        self._a = xx
        
A = HC(4)
A.x = 3
print(A.x)

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================
