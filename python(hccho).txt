np.set_printoptions(threshold=np.nan)  <--- 모든 data 다 표시
np.set_printoptions(precision=4)  <--- 유효숫자 표시
np.set_printoptions(suppress=True) <----- e없이 표시
====================================================================
import ctypes  # An included library with Python install.
def Mbox(title, text, style):
    ctypes.windll.user32.MessageBoxW(0, text, title, style)
====================================================================
np.shape ==> (n1-axis=0,n2-axis=1,n3-axis=2,...)
np.sum(x, axis=n) ==>  axis n 이 없으짐
===================================================================
np.squeeze(x) <== Remove single-dimensional entries from the shape of an array
np.expand_dims <== Insert a new axis, corresponding to a given position in the array shape
===================================================================
a=[1,1,2,2]
a= list(map((lambda x: x*x),a))
===================================================================
a=np.array([1,2,3,4,5,4,3,2,10]
b = a[a<5]  # numpy array이기 때문에 가능

# list comprehension
a=[1,2,3,4,5,4,3,2,10]
b = [ x*10 for x in a if x< 5]

===================================================================
# sting ==> float변환
a = [['1.2','2.33'],['1.2','2.33']]
b = np.array(a,dtype=np.float32)

# numpy array ==> list
c = b.tolist()

===================================================================
# Symmetric Matrix는 singular value = eigenvalue
# np.linalg의 첫번째  return  U의 열vector가 eigenvector에 해당함.


import numpy as np
np.set_printoptions(threshold=np.nan)
#a = np.random.randint(10, size=(9, 6))
#a =np.array([[0, 9, 7, 9, 1, 6],
#       [2, 3, 7, 8, 9, 6],
#       [2, 3, 4, 5, 9, 4],
#       [5, 8, 0, 3, 9, 5],
#       [7, 9, 9, 8, 4, 1],
#       [2, 7, 8, 2, 0, 0],
#       [8, 7, 0, 4, 8, 3],
#       [9, 2, 3, 8, 3, 0],
#       [6, 6, 2, 0, 9, 0]])


a =np.array([[5,-7,7],[4,-3,4],[4,-1,2]])
a = a.T.dot(a)

U, s, V = np.linalg.svd(a, full_matrices=True)

UU, ss, VV = np.linalg.svd(a, full_matrices=False) # "numerical recipes" 는 False에 해당하는 것을 구현

w,z = np.linalg.eig(a)

=====================================================================================
def f(x):
    return x+10

# make another list from a list
A = [1,2,3,4]
A2=[[1,2],[3,4],[5,6]]
#B = [x*10 for x in A]
#B = [f(x) for x in A]

#B = list(map(lambda x: x*10,A))
B = list(map(f,A))

df = pd.DataFrame(A2, columns=['age','age2'])
df['age']= df['age'].apply(f)
=====================================================================================
# DataFrame은 dict형으로 만들거나,  List에서 칼럼명을 지정해서 만들 수 있다.
df = pd.DataFrame({'Name':['C','K','P'],'age':[34,53,25]})


A=[[2,3,4],[3,3,5],[5,63,4],[3,4,5]]
A1=['a1','a2','a3']
A2=['x1','x2','x3','x4']
df2=pd.DataFrame(data=A,index=A2,columns=A1)
=====================================================================================
# loadtxt, genfromtxt는 같은 기능이지만, 
# genfromtxt는 missing data를 다룰 수 있는 다양한 옵션이 있다.
# numpy.loadtxt: equivalent function when no data is missing.


mydata = np.genfromtxt('mydata2.txt',delimiter=',',dtype=np.float32)
mydata = np.loadtxt('mydata2.txt', delimiter=',', dtype=np.float32)
=====================================================================================
import pickle
var1 = xxx
var2 = xxx
var3 = xx

with open('test.txt','wb') as f:
	pickle.dump(var1,f)
	pickle.dump(var2,f)
	pickle.dump(var3,f)



덤프(dump)한 순서대로 로드(load)된다.
 
with open('test.txt','rb') as f:
	data1=pickle.load(f)
	data2=pickle.load(f)
	data3=pickle.load(f)



dict형으로 변수들을 묶어서 한번에 쓰고, 한번에 읽어올수 있다.
파일을 열때 'b'(binary)로 해야함.
=====================================================================================
x1 = np.array([[[[9, 9, 0, 7, 8, 4, 6],
         [8, 1, 5, 0, 2, 3, 5],
         [8, 9, 1, 7, 3, 9, 2],
         [2, 2, 9, 1, 3, 0, 5],
         [1, 4, 2, 7, 5, 0, 4],
         [0, 2, 6, 9, 3, 2, 6],
         [8, 1, 1, 6, 9, 1, 5]],

        [[7, 7, 2, 1, 5, 5, 4],
         [5, 9, 4, 6, 4, 4, 4],
         [2, 9, 4, 2, 4, 2, 5],
         [2, 0, 5, 6, 0, 8, 5],
         [3, 9, 4, 9, 7, 5, 4],
         [8, 7, 2, 0, 2, 5, 3],
         [8, 3, 5, 7, 5, 4, 7]],

        [[7, 5, 4, 4, 6, 9, 0],
         [4, 9, 0, 3, 9, 1, 0],
         [6, 5, 5, 3, 6, 3, 7],
         [7, 1, 9, 8, 2, 7, 4],
         [5, 1, 3, 8, 2, 7, 7],
         [4, 6, 2, 8, 3, 3, 8],
         [1, 5, 6, 5, 5, 7, 6]]]])
W = np.random.randn(2,3,5,5)
b = np.zeros(2)

y1 = im2col(x1,2,2)
y2 = im2col(x2,2,2)
=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

=====================================================================================

